// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ports

import (
	"context"
	"sync"
)

// Ensure, that GatewayMock does implement Gateway.
// If this is not the case, regenerate this file with moq.
var _ Gateway = &GatewayMock{}

// GatewayMock is a mock implementation of Gateway.
//
//	func TestSomethingThatUsesGateway(t *testing.T) {
//
//		// make and configure a mocked Gateway
//		mockedGateway := &GatewayMock{
//			FindOneByIDFunc: func(ctx context.Context, id string) (*Record, error) {
//				panic("mock out the FindOneByID method")
//			},
//			InsertFunc: func(ctx context.Context, rec *Record) error {
//				panic("mock out the Insert method")
//			},
//			UpdateFunc: func(ctx context.Context, rec *Record) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedGateway in code that requires Gateway
//		// and then make assertions.
//
//	}
type GatewayMock struct {
	// FindOneByIDFunc mocks the FindOneByID method.
	FindOneByIDFunc func(ctx context.Context, id string) (*Record, error)

	// InsertFunc mocks the Insert method.
	InsertFunc func(ctx context.Context, rec *Record) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, rec *Record) error

	// calls tracks calls to the methods.
	calls struct {
		// FindOneByID holds details about calls to the FindOneByID method.
		FindOneByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Rec is the rec argument value.
			Rec *Record
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Rec is the rec argument value.
			Rec *Record
		}
	}
	lockFindOneByID sync.RWMutex
	lockInsert      sync.RWMutex
	lockUpdate      sync.RWMutex
}

// FindOneByID calls FindOneByIDFunc.
func (mock *GatewayMock) FindOneByID(ctx context.Context, id string) (*Record, error) {
	if mock.FindOneByIDFunc == nil {
		panic("GatewayMock.FindOneByIDFunc: method is nil but Gateway.FindOneByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindOneByID.Lock()
	mock.calls.FindOneByID = append(mock.calls.FindOneByID, callInfo)
	mock.lockFindOneByID.Unlock()
	return mock.FindOneByIDFunc(ctx, id)
}

// FindOneByIDCalls gets all the calls that were made to FindOneByID.
// Check the length with:
//
//	len(mockedGateway.FindOneByIDCalls())
func (mock *GatewayMock) FindOneByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockFindOneByID.RLock()
	calls = mock.calls.FindOneByID
	mock.lockFindOneByID.RUnlock()
	return calls
}

// Insert calls InsertFunc.
func (mock *GatewayMock) Insert(ctx context.Context, rec *Record) error {
	if mock.InsertFunc == nil {
		panic("GatewayMock.InsertFunc: method is nil but Gateway.Insert was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Rec *Record
	}{
		Ctx: ctx,
		Rec: rec,
	}
	mock.lockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	mock.lockInsert.Unlock()
	return mock.InsertFunc(ctx, rec)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//
//	len(mockedGateway.InsertCalls())
func (mock *GatewayMock) InsertCalls() []struct {
	Ctx context.Context
	Rec *Record
} {
	var calls []struct {
		Ctx context.Context
		Rec *Record
	}
	mock.lockInsert.RLock()
	calls = mock.calls.Insert
	mock.lockInsert.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *GatewayMock) Update(ctx context.Context, rec *Record) error {
	if mock.UpdateFunc == nil {
		panic("GatewayMock.UpdateFunc: method is nil but Gateway.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Rec *Record
	}{
		Ctx: ctx,
		Rec: rec,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, rec)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedGateway.UpdateCalls())
func (mock *GatewayMock) UpdateCalls() []struct {
	Ctx context.Context
	Rec *Record
} {
	var calls []struct {
		Ctx context.Context
		Rec *Record
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
