// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package file

import (
	"context"
	"github.com/fspcons/ports-service/src/domain"
	"sync"
)

// Ensure, that GatewayMock does implement Gateway.
// If this is not the case, regenerate this file with moq.
var _ Gateway = &GatewayMock{}

// GatewayMock is a mock implementation of Gateway.
//
//	func TestSomethingThatUsesGateway(t *testing.T) {
//
//		// make and configure a mocked Gateway
//		mockedGateway := &GatewayMock{
//			CheckOnFileFunc: func(ctx context.Context, port *domain.Port) error {
//				panic("mock out the CheckOnFile method")
//			},
//		}
//
//		// use mockedGateway in code that requires Gateway
//		// and then make assertions.
//
//	}
type GatewayMock struct {
	// CheckOnFileFunc mocks the CheckOnFile method.
	CheckOnFileFunc func(ctx context.Context, port *domain.Port) error

	// calls tracks calls to the methods.
	calls struct {
		// CheckOnFile holds details about calls to the CheckOnFile method.
		CheckOnFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Port is the port argument value.
			Port *domain.Port
		}
	}
	lockCheckOnFile sync.RWMutex
}

// CheckOnFile calls CheckOnFileFunc.
func (mock *GatewayMock) CheckOnFile(ctx context.Context, port *domain.Port) error {
	if mock.CheckOnFileFunc == nil {
		panic("GatewayMock.CheckOnFileFunc: method is nil but Gateway.CheckOnFile was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Port *domain.Port
	}{
		Ctx:  ctx,
		Port: port,
	}
	mock.lockCheckOnFile.Lock()
	mock.calls.CheckOnFile = append(mock.calls.CheckOnFile, callInfo)
	mock.lockCheckOnFile.Unlock()
	return mock.CheckOnFileFunc(ctx, port)
}

// CheckOnFileCalls gets all the calls that were made to CheckOnFile.
// Check the length with:
//
//	len(mockedGateway.CheckOnFileCalls())
func (mock *GatewayMock) CheckOnFileCalls() []struct {
	Ctx  context.Context
	Port *domain.Port
} {
	var calls []struct {
		Ctx  context.Context
		Port *domain.Port
	}
	mock.lockCheckOnFile.RLock()
	calls = mock.calls.CheckOnFile
	mock.lockCheckOnFile.RUnlock()
	return calls
}
